#!raku

use Bird;
use Sparrow6::DSL;
use Sparrow6::Task::Repository;
use Bird::DSL::File;
use Bird::DSL::Directory;
use Bird::DSL::Package;
use Bird::DSL::Pip;
use Bird::DSL::Command;
use Bird::DSL::Service;
use Bird::DSL::K8s;


sub MAIN (

  Bool :$debug = False, 
  Bool :$nocolor = False, 
  Str  :$host,
  Str  :$user,
  Str  :$password,
  Str  :$rules = "rules.raku",

)

{

  %*ENV<SP6_FORMAT_COLOR> = 1 unless $nocolor;

  %*ENV<SP6_DUMP_TASK_CODE> = 1 if $debug;

  my @hosts;

  if $host {
    if $host.IO ~~ :f {
      log("read host from file", $host);
      @hosts = EVALFILE "hosts.raku";
    } else {
        log("read host from command line", $host);
        @hosts = $host;
    }
  } elsif "hosts.raku".IO ~~ :f {
    log("read hosts from file", "hosts.raku");
    @hosts = EVALFILE "hosts.raku";
  } else {
      die "need host(s)"
  }

  log("cmd file", cmd-file());
  log("check file", state-file());

  # inject common code into cmd file
  cmd-file-init();

  EVALFILE $rules;

  Sparrow6::Task::Repository::Api.new.index-update();

  my %state = task-run "check my hosts", "ssh-bulk-check", %(
    cmd => cmd-file(),
    state => state-file(),
    hosts => @hosts,
    user => $user,
    password => $password,
  );

  my $checks-failed = %state<__data__><task-check-err-cnt>;
  
  if $checks-failed {
    say "====================================";
    say "[$checks-failed] CHECKS FAILED";
    exit(2);
  }

}
